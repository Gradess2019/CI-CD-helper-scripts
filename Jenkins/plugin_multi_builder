pipeline {
    agent any

    stages {
        stage('Validate Parameters') {
            steps {
                script {
                    if (params.PLUGIN_REPO != 'None' && params.PLUGIN_BRANCH.trim() == '') {
                        error("PLUGIN_BRANCH cannot be empty when PLUGIN_REPO is specified.")
                    }
                }
            }
        }

        stage('Validate Local Plugin Directory') {
            when {
                expression { params.PLUGIN_REPO == 'None' }
            }
            steps {
                script {
                    echo "Validating local plugin directory parameter: ${params.PLUGIN_DIR}..."
                    if (params.PLUGIN_DIR?.trim() == '') {
                        error("PLUGIN_DIR parameter is empty! Please provide a valid path.")
                    }
                    
                    echo "Checking if the plugin directory exists and is not empty..."
                    bat """
                        IF NOT EXIST "${params.PLUGIN_DIR}" (
                            echo ERROR: Plugin directory does not exist!
                            exit /B 1
                        )
                    """
                }
            }
        }

        stage('Clone Scripts Repository') {
            steps {
                script {
                    echo "Cloning scripts repository from ${env.SCRIPTS_REPO}..."
                    bat """
                        IF EXIST scripts-repo RMDIR /S /Q scripts-repo
                        git clone --branch master "${env.SCRIPTS_REPO}" scripts-repo
                    """
                }
            }
        }

        stage('Clone Plugin Repository') {
            when {
                expression { params.PLUGIN_REPO != 'None' }
            }
            steps {
                script {
                    echo "Cloning plugin repository from ${params.PLUGIN_REPO}..."
                    bat """
                        IF EXIST plugin-repo RMDIR /S /Q plugin-repo
                        git clone --branch "${params.PLUGIN_BRANCH}" "${params.PLUGIN_REPO}" plugin-repo
                    """
                }
            }
        }

        stage('Build Plugin') {
            steps {
                script {
                    def ueVersions = [
                        [version: "5.0", ueDir: env.UE_5_0_DIR],
                        [version: "5.1", ueDir: env.UE_5_1_DIR],
                        [version: "5.2", ueDir: env.UE_5_2_DIR],
                        [version: "5.3", ueDir: env.UE_5_3_DIR],
                        [version: "5.4", ueDir: env.UE_5_4_DIR],
                        [version: "5.5", ueDir: env.UE_5_5_DIR]
                    ]

                    for (ue in ueVersions) {
                        if (params."BUILD_${ue.version.replace('.', '_')}") {
                            echo "Building plugin for Unreal Engine ${ue.version}..."

                            // Determine plugin directory as an absolute path
                            def pluginDir = params.PLUGIN_REPO != 'None' 
                                ? "${WORKSPACE}\\plugin-repo" 
                                : params.PLUGIN_DIR
                            echo "Using plugin directory: ${pluginDir}"

                            // Find the .uplugin file in the specified plugin directory
                            def upluginFile = bat(
                                script: """
                                    FOR /F "delims=" %%F IN ('dir /S /B "${pluginDir}\\*.uplugin"') DO @echo %%F
                                """,
                                returnStdout: true
                            ).trim()

                            if (!upluginFile) {
                                error("No .uplugin file found in ${pluginDir}")
                            }

                            // Extract the plugin name from the .uplugin file path
                            def pluginName = upluginFile.substring(upluginFile.lastIndexOf('\\') + 1, upluginFile.lastIndexOf('.'))

                            // Construct the build command
                            def buildCommand = "python -u scripts-repo\\UE\\build_plugin.py --unreal-directory \"${ue.ueDir}\" --plugin-directory \"${pluginDir}\" --destination \"${params.BUILD_DESTINATION}\""
                            if (params.SUBMISSION_BUILD) {
                                buildCommand += " --submission"
                            }

                            // Run the build command
                            echo "Executing build command: ${buildCommand}"
                            bat buildCommand

                            // Archive the plugin
                            if (params.ARCHIVE) {
                                // Archive binary build
                                if (params.BINARY_BUILD) {
                                    def packageDirectory = "${params.BUILD_DESTINATION}\\${pluginName}"
                                    echo "Archiving binary build from ${packageDirectory}..."
                                    def archiveCommand = "python -u scripts-repo\\UE\\archive_plugin.py --package-directory \"${packageDirectory}\""
                                    echo "Executing archive command: ${archiveCommand}"
                                    bat archiveCommand
                                }

                                // Archive submission build
                                if (params.SUBMISSION_BUILD) {
                                    def packageDirectory = "${params.BUILD_DESTINATION}\\${pluginName}Submission"
                                    echo "Archiving submission build from ${packageDirectory}..."
                                    def archiveCommand = "python -u scripts-repo\\UE\\archive_plugin.py --package-directory \"${packageDirectory}\""
                                    echo "Executing archive command: ${archiveCommand}"
                                    bat archiveCommand
                                }
                            }
                        }
                    }
                }
            }
        }

    }
}
